<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>言語 on Klog</title><link>https://kseki.github.io/categories/%E8%A8%80%E8%AA%9E/</link><description>Recent content in 言語 on Klog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>kseki</copyright><lastBuildDate>Tue, 06 Aug 2024 16:33:05 +0900</lastBuildDate><atom:link href="https://kseki.github.io/categories/%E8%A8%80%E8%AA%9E/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScriptでフィッシャーイェーツのアルゴリズムを使って配列をシャッフルする方法</title><link>https://kseki.github.io/posts/shuffle-algorithm-by-typescript/</link><pubDate>Tue, 06 Aug 2024 16:33:05 +0900</pubDate><guid>https://kseki.github.io/posts/shuffle-algorithm-by-typescript/</guid><description>&lt;img src="https://kseki.github.io/posts/shuffle-algorithm-by-typescript/cover.webp" alt="Featured image of post TypeScriptでフィッシャーイェーツのアルゴリズムを使って配列をシャッフルする方法" />&lt;h2 id="概要">概要
&lt;/h2>&lt;p>先日、あるプロジェクトで配列の要素をランダムにシャッフルする必要がありました。TypeScript (5.5.4) には組み込みの &lt;code>shuffle&lt;/code> 関数がないため、自分で実装する必要がありました。この記事では、その際に調べたフィッシャーイェーツのシャッフルアルゴリズムについて解説します。&lt;/p>
&lt;h2 id="rubyの配列シャッフル実装">Rubyの配列シャッフル実装
&lt;/h2>&lt;p>RubyにはArryクラスに&lt;a class="link" href="https://github.com/ruby/ruby/blob/v3_3_4/array.rb#L16-L28" target="_blank" rel="noopener"
>suffle&lt;/a>, &lt;a class="link" href="https://github.com/ruby/ruby/blob/v3_3_4/array.rb#L2-L14" target="_blank" rel="noopener"
>suffle!&lt;/a> という関数があります。&lt;/p>
&lt;p>これらの関数は、以下のC言語で書かれている&lt;a class="link" href="https://github.com/ruby/ruby/blob/v3_3_4/array.c#L6496C1-L6516C2" target="_blank" rel="noopener"
>rb_ary_suffle_bang&lt;/a> 関数を呼び出しています。&lt;/p>
&lt;p>この関数のアルゴリズムは&lt;a class="link" href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E2%80%93%E3%82%A4%E3%82%A7%E3%83%BC%E3%83%84%E3%81%AE%E3%82%B7%E3%83%A3%E3%83%83%E3%83%95%E3%83%AB" target="_blank" rel="noopener"
>フィッシャーイェーツのシャッフル&lt;/a>と言われるものです。特徴は以下の通りです：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ランダム性&lt;/strong>: 配列の各要素が等しい確率で任意の位置に移動する。&lt;/li>
&lt;li>&lt;strong>インプレース&lt;/strong>: 配列の要素をその場でシャッフルし、追加のメモリをほとんど使用しない。&lt;/li>
&lt;li>&lt;strong>時間計算量&lt;/strong>: O(n)の時間でシャッフルを完了する。&lt;/li>
&lt;li>&lt;strong>安定性&lt;/strong>: 元の順序を保持しないため、安定なソートではない。&lt;/li>
&lt;li>&lt;strong>シンプルな実装&lt;/strong>: アルゴリズムはシンプルで理解しやすい。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">rb_ary_shuffle_bang&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">rb_execution_context_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="n">ary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">VALUE&lt;/span> &lt;span class="n">randgen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">rb_ary_modify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ary&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">RARRAY_LEN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ary&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">RARRAY_PTR_USE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">RAND_UPTO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VALUE&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">len&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nf">RARRAY_LEN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ary&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nf">RARRAY_CONST_PTR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ary&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">rb_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb_eRuntimeError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;modified during shuffle&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ptr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ptr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span> &lt;span class="cm">/* WB: no new reference */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ary&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="typescriptで配列シャッフル実装">TypeScriptで配列シャッフル実装
&lt;/h2>&lt;p>この関数は、配列の要素をランダムにシャッフルし、元の配列を変更します。フィッシャーイェーツのアルゴリズムを使用しているため、効率的かつ簡単に実装できます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">shuffleArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">array&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="おみくじの実装例">おみくじの実装例
&lt;/h2>&lt;p>上記の関数を使っておみくじを実装してみました。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.typescriptlang.org/play/?#code/MYewdgzgLgBBAWBXAZsgNgUwIICccEMBPGAXhgAp88iAuOKHASzAHMBtAXQEpSA&amp;#43;GAN4AoGDGQgcFTLEakYVAoQB0mVlHgwAtDACMAbhiz&amp;#43;ABgONNmnsNGjQkWACs5AWXzql6EBPKv3BMAAmIAC25DwAVBSyANS6XFx6IjZsCkRsjBwANPLUhGwOHBxyKbn5WTmK6YWJogC&amp;#43;STgYUIg4YBVEibWJQnbQMCGMANaIDrJkbEmiAOSA5JqAkCpTmZMwU4C0cgtLNiuA8Doby1N7W1OAUsqHNlOA1OZn0xe7i-uAb4r3R9tPm&amp;#43;fHb-sXX0czT0IOEIeuAICBMCoQCxyAgUOhsLlyANhqMuGxjNwgA" target="_blank" rel="noopener"
>フィッシャーイェーツ関数でおみくじ | Playground Link&lt;/a>&lt;/p></description></item></channel></rss>